{"version":3,"sources":["logo.svg","components/Card/index.js","components/Header/index.js","components/Footer/index.js","components/SearchBox/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserCard","data","className","alt","name","last","src","picture","thumbnail","first","email","Header","Footer","Searchbox","props","id","onChange","handleSearch","type","onClick","handleSort","axios","get","App","state","employees","filteredEmployees","isFetching","event","value","target","filter","employee","toLowerCase","startsWith","setState","sort","employee1","employee2","order","localeCompare","API","responce","console","log","this","results","SearchBox","map","Card","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,8PC4B5BC,MAxBf,YAA6B,IAATC,EAAQ,EAARA,KAChB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKC,IAAKF,EAAKG,KAAKC,KAAMC,IAAKL,EAAKM,QAAQC,aAEhD,yBAAKN,UAAU,WAEX,4BACI,8CADJ,IACiCD,EAAKG,KAAKK,OAE3C,4BACI,6CADJ,IACgCR,EAAKG,KAAKC,MAE1C,4BACI,0CADJ,IAC6BJ,EAAKS,U,OCRnCC,MARf,WACI,OACI,yBAAKT,UAAU,UACX,wBAAIA,UAAU,YAAd,wBCKGU,MARf,WACI,OACI,yBAAKV,UAAU,UACX,wBAAIA,UAAU,cAAd,wB,OCaGW,MAhBf,SAAmBC,GAEf,OACI,yBAAKC,GAAG,aACJ,2BACIC,SAAUF,EAAMG,aAChBC,KAAK,SAGT,4BACIC,QAASL,EAAMM,YADnB,UCVG,EACD,WACN,OAAOC,IAAMC,IAAI,gDCwEVC,E,4MA7DbC,MAAQ,CACNC,UAAW,GACXC,kBAAmB,GACnBC,YAAY,G,EAcdV,aAAe,SAACW,GACd,IAAMC,EAAQD,EAAME,OAAOD,MACrBJ,EAAY,EAAKD,MAAMC,UAAUM,QAAO,SAACC,GAC7C,OAAOA,EAAS5B,KAAKC,KAAK4B,cAAcC,WAAWL,MAErD,EAAKM,SAAS,CAAET,kBAAmBD,K,EAErCL,WAAa,WACX,IAAMK,EAAY,EAAKD,MAAMC,UAAUW,MAAK,SAACC,EAAWC,GACtD,OAAO,EAAKd,MAAMe,MAAQF,EAAUjC,KAAKC,KAAKmC,cAAcF,EAAUlC,KAAKC,MAAQiC,EAAUlC,KAAKC,KAAKmC,cAAcH,EAAUjC,KAAKC,SAGtI,EAAK8B,SAAS,CAAET,kBAAmBD,IACnC,EAAKU,SAAS,CAAEI,OAAQ,EAAKf,MAAMe,S,kMAvBZE,I,OAAjBC,E,OACNC,QAAQC,IAAIF,GACZG,KAAKV,SAAS,CACZV,UAAWiB,EAASzC,KAAK6C,QACzBpB,kBAAmBgB,EAASzC,KAAK6C,QACjCnB,YAAY,I,qIA8Bd,OADAgB,QAAQC,IAAIC,KAAKrB,OAMf,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC6C,EAAD,CAAW9B,aAAc4B,KAAK5B,aAAcG,WAAYyB,KAAKzB,aAE5DyB,KAAKrB,MAAME,kBAAkBsB,KAAI,SAAAhB,GAAQ,OAAI,kBAACiB,EAAD,CAAMhD,KAAM+B,OAG1D,kBAAC,EAAD,W,GAxDUkB,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.82fdd1a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction UserCard({ data }) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={data.name.last} src={data.picture.thumbnail} />\n            </div>\n            <div className=\"content\">\n\n                <li>\n                    <strong>FirstName:</strong> {data.name.first}\n                </li>\n                <li>\n                    <strong>LastName:</strong> {data.name.last}\n                </li>\n                <li>\n                    <strong>email:</strong> {data.email}\n                </li>\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default UserCard;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <h1 className=\"titleBar\">Employee Directory</h1>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <h1 className=\"coolFooter\">Employee Directory</h1>\n        </div>\n    )\n}\n\nexport default Footer;","import { render } from \"@testing-library/react\";\nimport React from \"react\";\n\nfunction Searchbox(props) {\n\n    return (\n        <div id=\"searchBox\">\n            <input\n                onChange={props.handleSearch}\n                type=\"text\"\n\n            ></input>\n            <button\n                onClick={props.handleSort}\n            >Sort</button>\n        </div>\n    )\n}\n\nexport default Searchbox;","import axios from \"axios\";\n\nexport default {\n    getUsers: () => {\n        return axios.get(\"https://randomuser.me/api?results=20&nat=us\");\n    },\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\n//import EmployeeTable from \"./components/EmployeeTable\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\"\nimport Footer from './components/Footer';\nimport SearchBox from './components/SearchBox';\n\nimport API from './utils/API';\n\n\nclass App extends React.Component {\n\n  state = {\n    employees: [],\n    filteredEmployees: [],\n    isFetching: true,\n  }\n\n  async componentDidMount() {\n    const responce = await API.getUsers();\n    console.log(responce);\n    this.setState({\n      employees: responce.data.results,\n      filteredEmployees: responce.data.results,\n      isFetching: true,\n    })\n\n  }\n\n  handleSearch = (event) => {\n    const value = event.target.value;\n    const employees = this.state.employees.filter((employee) => {\n      return employee.name.last.toLowerCase().startsWith(value);\n    });\n    this.setState({ filteredEmployees: employees })\n  }\n  handleSort = () => {\n    const employees = this.state.employees.sort((employee1, employee2) => {\n      return this.state.order ? employee1.name.last.localeCompare(employee2.name.last) : employee2.name.last.localeCompare(employee1.name.last)\n\n    });\n    this.setState({ filteredEmployees: employees })\n    this.setState({ order: !this.state.order })\n  }\n\n\n  // filterGender() {\n  //   console.log('filterGender', this.state.employees)\n  //   let filterResults = this.state.filteredEmployees.filter(employee => employee.gender === \"female\")\n  //   this.setState({ filteredEmployees: filterResults })\n  // }\n\n  render() {\n    console.log(this.state)\n    return (\n\n\n\n\n      <div className=\"App\" >\n        <Header />\n        <SearchBox handleSearch={this.handleSearch} handleSort={this.handleSort} />\n        {/* <EmployeeTable employeeData={this.state.employees} /> */}\n        {this.state.filteredEmployees.map(employee => <Card data={employee} />)}\n        {/* <Card employeeData={this.state.employees} /> */}\n        {/* <button onClick={this.filterGender()}>Filter Gender</button> */}\n        <Footer />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}